### Type definitions saved at 2022-02-16T21:58:01.928Z ###

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  url: String
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
}

type Site implements Node @derivedTypes @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  flags: SiteFlags
  polyfill: Boolean
  pathPrefix: String
}

type SiteSiteMetadata {
  title: String
  description: String
}

type SiteFlags {
  DEV_SSR: Boolean
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  """Width of the generated low-res preview. Default is 20px"""
  width: Int

  """
  Force the output format for the low-res preview. Default is to use the same
  format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean = false
  duotone: DuotoneGradient
  rotate: Int = 0
  trim: Float = 0
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type ImageSharp implements Node @childOf(types: ["File"]) @dontInfer {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the maximum
    display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int

    """
    The display height of the generated image for layout = FIXED, and the
    maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source
    image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same
    format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    A list of image pixel densities to generate. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1,
    2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide.
    Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it
    is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a
    background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
  ): JSON!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
}

type LocalSearchPages implements Node @dontInfer {
  """The name of the index."""
  name: String!

  """The search engine used to create the index."""
  engine: String!

  """The search index created using the selected engine."""
  index: String!

  """A JSON object used to map search results to their data."""
  store: JSON!

  """
  Save the index to the site's static directory and return a public URL to it.
  """
  publicIndexURL: String!

  """
  Save the store to the site's static directory and return a public URL to it.
  """
  publicStoreURL: String!
}

type StrapiPost implements Node @dontInfer {
  title: String
  description: String
  slug: String
  published_at: Date @dateformat
  created_at: Date @dateformat
  updated_at: Date @dateformat
  Subtitle: String
  subtitle: String
  strapiId: Int
}

type StrapiGlobal implements Node @derivedTypes @dontInfer {
  siteName: String
  published_at: Date @dateformat
  created_at: Date @dateformat
  updated_at: Date @dateformat
  defaultSeo: StrapiGlobalDefaultSeo
  favicon: StrapiGlobalFavicon
  placeHolder: StrapiGlobalPlaceHolder
  strapiId: Int
}

type StrapiGlobalDefaultSeo @derivedTypes {
  id: Int
  metaTitle: String
  metaDescription: String
  shareImage: StrapiGlobalDefaultSeoShareImage
}

type StrapiGlobalDefaultSeoShareImage @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: StrapiGlobalDefaultSeoShareImageFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: StrapiGlobalDefaultSeoShareImageProvider_metadata
  created_at: Date @dateformat
  updated_at: Date @dateformat
  localFile: File @link(by: "id", from: "localFile___NODE")
}

type StrapiGlobalDefaultSeoShareImageFormats @derivedTypes {
  small: StrapiGlobalDefaultSeoShareImageFormatsSmall
  thumbnail: StrapiGlobalDefaultSeoShareImageFormatsThumbnail
}

type StrapiGlobalDefaultSeoShareImageFormatsSmall @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiGlobalDefaultSeoShareImageFormatsSmallProvider_metadata
}

type StrapiGlobalDefaultSeoShareImageFormatsSmallProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiGlobalDefaultSeoShareImageFormatsThumbnail @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiGlobalDefaultSeoShareImageFormatsThumbnailProvider_metadata
}

type StrapiGlobalDefaultSeoShareImageFormatsThumbnailProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiGlobalDefaultSeoShareImageProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiGlobalFavicon @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: StrapiGlobalFaviconFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: StrapiGlobalFaviconProvider_metadata
  created_at: Date @dateformat
  updated_at: Date @dateformat
  localFile: File @link(by: "id", from: "localFile___NODE")
}

type StrapiGlobalFaviconFormats @derivedTypes {
  small: StrapiGlobalFaviconFormatsSmall
  thumbnail: StrapiGlobalFaviconFormatsThumbnail
}

type StrapiGlobalFaviconFormatsSmall @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiGlobalFaviconFormatsSmallProvider_metadata
}

type StrapiGlobalFaviconFormatsSmallProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiGlobalFaviconFormatsThumbnail @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiGlobalFaviconFormatsThumbnailProvider_metadata
}

type StrapiGlobalFaviconFormatsThumbnailProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiGlobalFaviconProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiGlobalPlaceHolder @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: StrapiGlobalPlaceHolderFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: StrapiGlobalPlaceHolderProvider_metadata
  created_at: Date @dateformat
  updated_at: Date @dateformat
  localFile: File @link(by: "id", from: "localFile___NODE")
}

type StrapiGlobalPlaceHolderFormats @derivedTypes {
  small: StrapiGlobalPlaceHolderFormatsSmall
  thumbnail: StrapiGlobalPlaceHolderFormatsThumbnail
}

type StrapiGlobalPlaceHolderFormatsSmall @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiGlobalPlaceHolderFormatsSmallProvider_metadata
}

type StrapiGlobalPlaceHolderFormatsSmallProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiGlobalPlaceHolderFormatsThumbnail @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiGlobalPlaceHolderFormatsThumbnailProvider_metadata
}

type StrapiGlobalPlaceHolderFormatsThumbnailProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiGlobalPlaceHolderProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiCategory implements Node @derivedTypes @dontInfer {
  name: String
  slug: String
  published_at: Date @dateformat
  created_at: Date @dateformat
  updated_at: Date @dateformat
  image: StrapiCategoryImage
  products: [StrapiCategoryProducts]
  strapiId: Int
}

type StrapiCategoryImage @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: StrapiCategoryImageFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: StrapiCategoryImageProvider_metadata
  created_at: Date @dateformat
  updated_at: Date @dateformat
  localFile: File @link(by: "id", from: "localFile___NODE")
}

type StrapiCategoryImageFormats @derivedTypes {
  small: StrapiCategoryImageFormatsSmall
  thumbnail: StrapiCategoryImageFormatsThumbnail
}

type StrapiCategoryImageFormatsSmall @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiCategoryImageFormatsSmallProvider_metadata
}

type StrapiCategoryImageFormatsSmallProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiCategoryImageFormatsThumbnail @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiCategoryImageFormatsThumbnailProvider_metadata
}

type StrapiCategoryImageFormatsThumbnailProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiCategoryImageProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiCategoryProducts @derivedTypes {
  id: Int
  title: String
  slug: String
  category: Int
  description: String
  price: Int
  dealerUrl: String
  published_at: Date @dateformat
  created_at: Date @dateformat
  updated_at: Date @dateformat
  specifications: [StrapiCategoryProductsSpecifications]
  image: StrapiCategoryProductsImage
}

type StrapiCategoryProductsSpecifications {
  id: Int
  key: String
  value: String
}

type StrapiCategoryProductsImage @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: StrapiCategoryProductsImageFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: StrapiCategoryProductsImageProvider_metadata
  created_at: Date @dateformat
  updated_at: Date @dateformat
  localFile: File @link(by: "id", from: "localFile___NODE")
}

type StrapiCategoryProductsImageFormats @derivedTypes {
  small: StrapiCategoryProductsImageFormatsSmall
  thumbnail: StrapiCategoryProductsImageFormatsThumbnail
}

type StrapiCategoryProductsImageFormatsSmall @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiCategoryProductsImageFormatsSmallProvider_metadata
}

type StrapiCategoryProductsImageFormatsSmallProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiCategoryProductsImageFormatsThumbnail @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiCategoryProductsImageFormatsThumbnailProvider_metadata
}

type StrapiCategoryProductsImageFormatsThumbnailProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiCategoryProductsImageProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiProduct implements Node @derivedTypes @dontInfer {
  title: String
  slug: String
  category: StrapiProductCategory
  description: String
  price: Int
  dealerUrl: String
  published_at: Date @dateformat
  created_at: Date @dateformat
  updated_at: Date @dateformat
  specifications: [StrapiProductSpecifications]
  image: StrapiProductImage
  relatedProducts: [StrapiProductRelatedProducts]
  strapiId: Int
}

type StrapiProductCategory @derivedTypes {
  id: Int
  name: String
  slug: String
  published_at: Date @dateformat
  created_at: Date @dateformat
  updated_at: Date @dateformat
  image: StrapiProductCategoryImage
}

type StrapiProductCategoryImage @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: StrapiProductCategoryImageFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: StrapiProductCategoryImageProvider_metadata
  created_at: Date @dateformat
  updated_at: Date @dateformat
  localFile: File @link(by: "id", from: "localFile___NODE")
}

type StrapiProductCategoryImageFormats @derivedTypes {
  small: StrapiProductCategoryImageFormatsSmall
  thumbnail: StrapiProductCategoryImageFormatsThumbnail
}

type StrapiProductCategoryImageFormatsSmall @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiProductCategoryImageFormatsSmallProvider_metadata
}

type StrapiProductCategoryImageFormatsSmallProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiProductCategoryImageFormatsThumbnail @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiProductCategoryImageFormatsThumbnailProvider_metadata
}

type StrapiProductCategoryImageFormatsThumbnailProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiProductCategoryImageProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiProductSpecifications {
  id: Int
  key: String
  value: String
}

type StrapiProductImage @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: StrapiProductImageFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: StrapiProductImageProvider_metadata
  created_at: Date @dateformat
  updated_at: Date @dateformat
  localFile: File @link(by: "id", from: "localFile___NODE")
}

type StrapiProductImageFormats @derivedTypes {
  small: StrapiProductImageFormatsSmall
  thumbnail: StrapiProductImageFormatsThumbnail
}

type StrapiProductImageFormatsSmall @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiProductImageFormatsSmallProvider_metadata
}

type StrapiProductImageFormatsSmallProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiProductImageFormatsThumbnail @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiProductImageFormatsThumbnailProvider_metadata
}

type StrapiProductImageFormatsThumbnailProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiProductImageProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiProductRelatedProducts @derivedTypes {
  id: Int
  title: String
  slug: String
  category: Int
  description: String
  price: Int
  dealerUrl: String
  published_at: Date @dateformat
  created_at: Date @dateformat
  updated_at: Date @dateformat
  specifications: [StrapiProductRelatedProductsSpecifications]
  image: StrapiProductRelatedProductsImage
}

type StrapiProductRelatedProductsSpecifications {
  id: Int
  key: String
  value: String
}

type StrapiProductRelatedProductsImage @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: StrapiProductRelatedProductsImageFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: StrapiProductRelatedProductsImageProvider_metadata
  created_at: Date @dateformat
  updated_at: Date @dateformat
  localFile: File @link(by: "id", from: "localFile___NODE")
}

type StrapiProductRelatedProductsImageFormats @derivedTypes {
  small: StrapiProductRelatedProductsImageFormatsSmall
  thumbnail: StrapiProductRelatedProductsImageFormatsThumbnail
}

type StrapiProductRelatedProductsImageFormatsSmall @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiProductRelatedProductsImageFormatsSmallProvider_metadata
}

type StrapiProductRelatedProductsImageFormatsSmallProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiProductRelatedProductsImageFormatsThumbnail @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: StrapiProductRelatedProductsImageFormatsThumbnailProvider_metadata
}

type StrapiProductRelatedProductsImageFormatsThumbnailProvider_metadata {
  public_id: String
  resource_type: String
}

type StrapiProductRelatedProductsImageProvider_metadata {
  public_id: String
  resource_type: String
}